
module msrv32_alu (op_1_in, op_2_in, opcode_in, result_out);
input [31:0]op_1_in, op_2_in;
input [3:0]opcode_in;
output reg [31:0] result_out;

parameter ALU_ADD  : 4'b 0000;
parameter ALU_SUB  : 4'b 1000;
parameter ALU_SLT  : 4'b 0010;
parameter ALU_SLTU : 4'b 0011;
parameter ALU_AND  : 4'b 0111;
parameter ALU_OR   : 4'b 0110; 
parameter ALU_XOR  : 4'b 0100;
parameter ALU_SLL  : 4'b 0001;
parameter ALU_SRL  : 4'b 0101;
parameter ALU_SRA  : 4'b 1101;

always @(*)
begin
   case(opcode_in)
   ALU_ADD  : result_out = op_1_in + op_2_in;
   ALU_SUB  : result_out = op_1_in - op_2_in;
   ALU_SLT  : result_out = {{31{1'b0}},{op_1_in[31]^op_2_in[31] ? op_1_in[31] : op_1_in < op_2_in}};
   ALU_SLTU : result_out = op_1_in < op_2_in ? 32'b1 : 32'b0;
   ALU_AND  : result_out = op_1_in & op_2_in;
   ALU_OR   : result_out = op_1_in | op_2_in;
   ALU_XOR  : result_out = op_1_in ^ op_2_in;
   ALU_SLL  : result_out = op_1_in << op_2_in;
   ALU_SRL  : result_out = op_1_in >> op_2_in;
   ALU_SRA  : result_out = op_1_in >>> op_2_in;
   default  : result_out = 32'bz;
   endcase
end
endmodule
